type: postgresql

status:
  class: receiver
  stability:
    beta: [metrics]
  distributions: [contrib, splunk, observiq, sumo]
  codeowners:
    active: [djaglowski]

resource_attributes:
  postgresql.database.name:
    description: The name of the database.
    enabled: false
    type: string
  postgresql.table.name:
    description: The schema name followed by the table name.
    enabled: false
    type: string
  postgresql.index.name:
    description: The name of the index on a table.
    enabled: false
    type: string

attributes:
  bg_buffer_source:
    description: The source of a buffer write.
    type: string
    enum:
      - backend
      - backend_fsync
      - checkpoints
      - bgwriter
    name_override: source
  bg_checkpoint_type:
    description: The type of checkpoint state.
    type: string
    enum:
      - requested
      - scheduled
    name_override: type
  bg_duration_type:
    description: The type of time spent during the checkpoint.
    type: string
    enum:
      - sync
      - write
    name_override: type
  source:
    description: The block read source type.
    type: string
    enum:
      - heap_read
      - heap_hit
      - idx_read
      - idx_hit
      - toast_read
      - toast_hit
      - tidx_read
      - tidx_hit
  operation:
    description: The database operation.
    type: string
    enum: [ins, upd, del, hot_upd]
  replication_client:
    description: The IP address of the client connected to this backend. If this field is "unix", it indicates either that the client is connected via a Unix socket.
    type: string
  state:
    description: The tuple (row) state.
    type: string
    enum: [dead, live]
  wal_operation_lag:
    name_override: operation
    description: The operation which is responsible for the lag.
    type: string
    enum: [flush, replay, write]
  query_statement:
    description: the query statement.
    type: string
  userid:
    description: id of the user that executed this query.
    type: int
  dbid:
    description: id of the database.
    type: int
  queryid:
    description: id of the query.
    type: int
  backend_type:
    description: backend type for IO stats
    type: string
  schema_name:
    description: name of the schema
    type: string
  relation_name:
    description: name of the relation
    type: string
  dbname: 
    description: name of the database  
    type: string
  relname:
    description: name of the relation
    type: string
  command:
    description: The command that is running. Either CLUSTER or VACUUM FULL.
    type: string
  phase:
    description: Current processing phase of index creation.
    type: string
  index: 
    description: Index of the table
    type: string 

metrics:
  postgresql.bgwriter.buffers.allocated:
    description: Number of buffers allocated.
    enabled: false
    sum:
      aggregation_temporality: cumulative
      monotonic: true
      value_type: int
    unit: "{buffers}"
  postgresql.bgwriter.buffers.writes:
    attributes:
      - bg_buffer_source
    description: Number of buffers written.
    enabled: false
    sum:
      aggregation_temporality: cumulative
      monotonic: true
      value_type: int
    unit: "{buffers}"
  postgresql.bgwriter.checkpoint.count:
    attributes:
      - bg_checkpoint_type
    description: The number of checkpoints performed.
    enabled: false
    sum:
      aggregation_temporality: cumulative
      monotonic: true
      value_type: int
    unit: "{checkpoints}"
  postgresql.bgwriter.duration:
    attributes:
      - bg_duration_type
    description: Total time spent writing and syncing files to disk by checkpoints.
    enabled: false
    sum:
      aggregation_temporality: cumulative
      monotonic: true
      value_type: double
    unit: ms
  postgresql.bgwriter.maxwritten:
    description: Number of times the background writer stopped a cleaning scan because it had written too many buffers.
    enabled: false
    sum:
      aggregation_temporality: cumulative
      monotonic: true
      value_type: int
    unit: 1
  postgresql.blocks_read:
    enabled: false
    description: The number of blocks read.
    unit: 1
    sum:
      value_type: int
      monotonic: true
      aggregation_temporality: cumulative
    attributes: [source]
  postgresql.database.count:
    description: Number of user databases.
    enabled: false
    sum:
      aggregation_temporality: cumulative
      monotonic: false
      value_type: int
    unit: "{databases}"
  postgresql.db_size:
    enabled: false
    description: The database disk usage.
    unit: By
    sum:
      value_type: int
      monotonic: false
      aggregation_temporality: cumulative
  postgresql.backends:
    enabled: false
    description: The number of backends.
    unit: 1
    sum:
      value_type: int
      monotonic: false
      aggregation_temporality: cumulative
  postgresql.connection.max:
    enabled: false
    description: Configured maximum number of client connections allowed
    unit: "{connections}"
    gauge:
      value_type: int
  postgresql.rows:
    enabled: false
    description: The number of rows in the database.
    unit: 1
    sum:
      value_type: int
      monotonic: false
      aggregation_temporality: cumulative
    attributes: [state]
  postgresql.index.scans:
    description: The number of index scans on a table.
    enabled: false
    sum:
      aggregation_temporality: cumulative
      monotonic: true
      value_type: int
    unit: "{scans}"
  postgresql.index.size:
    description: The size of the index on disk.
    enabled: false
    gauge:
      value_type: int
    unit: "By"
  postgresql.operations:
    enabled: false
    description: The number of db row operations.
    unit: 1
    sum:
      value_type: int
      monotonic: true
      aggregation_temporality: cumulative
    attributes: [operation]
  postgresql.replication.data_delay:
    attributes: [replication_client]
    description: The amount of data delayed in replication.
    enabled: false
    gauge:
      value_type: int
    unit: By
  postgresql.deadlocks:
    enabled: false
    description: The number of deadlocks.
    unit: "{deadlock}"
    sum:
      value_type: int
      monotonic: true
      aggregation_temporality: cumulative
  postgresql.sequential_scans:
    enabled: false
    description: The number of sequential scans.
    unit: "{sequential_scan}"
    sum:
      value_type: int
      monotonic: true
      aggregation_temporality: cumulative
  postgresql.table.count:
    description: Number of user tables in a database.
    enabled: false
    sum:
      aggregation_temporality: cumulative
      monotonic: false
      value_type: int
    unit: "{table}"
  postgresql.table.size:
    description: Disk space used by a table.
    enabled: false
    unit: By
    sum:
      aggregation_temporality: cumulative
      monotonic: false
      value_type: int
  postgresql.table.vacuum.count:
    description: Number of times a table has manually been vacuumed.
    enabled: false
    unit: "{vacuums}"
    sum:
      aggregation_temporality: cumulative
      monotonic: true
      value_type: int
  postgresql.temp_files:
    enabled: false
    description: The number of temp files.
    unit: "{temp_file}"
    sum:
      value_type: int
      monotonic: true
      aggregation_temporality: cumulative   
  postgresql.wal.lag:
    attributes: [wal_operation_lag, replication_client]
    description: Time between flushing recent WAL locally and receiving notification that the standby server has completed an operation with it.
    enabled: false
    unit: s
    gauge:
      value_type: int
    extended_documentation: |
      This metric requires WAL to be enabled with at least one replica.

  postgresql.analyzed:
    attributes:
      - schema_name
      - relation_name
    enabled: false 
    description: Enabled with `relations`. The number of times this table has been manually
      analyzed. This metric is tagged with schema, table.
    unit: "1"
    sum:
      value_type: int
      input_type: string
      monotonic: false
      aggregation_temporality: cumulative
  postgresql.autoanalyzed:
    attributes:
      - schema_name
      - relation_name
    enabled: false
    description: Enabled with `relations`. The number of times this table has been analyzed
      by the autovacuum daemon. This metric is tagged with db, schema, table.
    unit: "1"
    sum:
      value_type: int
      input_type: string
      monotonic: false
      aggregation_temporality: cumulative
  postgresql.autovacuumed:
    attributes:
      - schema_name
      - relation_name
    enabled: false
    description: Enabled with `relations`. The number of times this table has been vacuumed
      by the autovacuum daemon. This metric is tagged with db, schema, table.
    unit: "1"
    sum:
      value_type: int
      input_type: string
      monotonic: false
      aggregation_temporality: cumulative
  postgresql.bgwriter.buffers_alloc:
    enabled: false
    description: The number of buffers allocated
    unit: "1"
    sum:
      value_type: int
      input_type: string
      monotonic: true
      aggregation_temporality: cumulative
  postgresql.bgwriter.buffers_backend:
    enabled: false
    description: The number of buffers written directly by a backend.
    unit: '{buffer}'
    sum:
      value_type: int
      input_type: string
      monotonic: true
      aggregation_temporality: cumulative
  postgresql.bgwriter.buffers_backend_fsync:
    enabled: false
    description: The of times a backend had to execute its own fsync call instead of
      the background writer.
    unit: "1"
    sum:
      value_type: int
      input_type: string
      monotonic: true
      aggregation_temporality: cumulative
  postgresql.bgwriter.buffers_checkpoint:
    enabled: false
    description: The number of buffers written during checkpoints.
    unit: "1"
    sum:
      value_type: int
      input_type: string
      monotonic: true
      aggregation_temporality: cumulative
  postgresql.bgwriter.buffers_clean:
    enabled: false
    description: The number of buffers written by the background writer.
    unit: "1"
    sum:
      value_type: int
      input_type: string
      monotonic: true
      aggregation_temporality: cumulative
  postgresql.bgwriter.checkpoints_requested:
    enabled: false
    description: The number of requested checkpoints that were performed.
    unit: "1"
    sum:
      value_type: int
      input_type: string
      monotonic: true
      aggregation_temporality: cumulative
  postgresql.bgwriter.checkpoints_timed:
    enabled: false
    description: The number of scheduled checkpoints that were performed.
    unit: "1"
    sum:
      value_type: int
      input_type: string
      monotonic: true
      aggregation_temporality: cumulative
  postgresql.bgwriter.maxwritten_clean:
    enabled: false
    description: The number of times the background writer stopped a cleaning scan due
      to writing too many buffers.
    unit: "1"
    sum:
      value_type: int
      input_type: string
      monotonic: true
      aggregation_temporality: cumulative
  postgresql.bgwriter.sync_time:
    enabled: false
    description: The total amount of checkpoint processing time spent synchronizing
      files to disk.
    unit: '{millisecond}'
    sum:
      value_type: int
      input_type: string
      monotonic: true
      aggregation_temporality: cumulative
  postgresql.bgwriter.write_time:
    enabled: false
    description: The total amount of checkpoint processing time spent writing files
      to disk.
    unit: '{millisecond}'
    sum:
      value_type: int
      input_type: string
      monotonic: true
      aggregation_temporality: cumulative
  postgresql.checksums.checksum_failures:
    attributes:
      - dbname
    enabled: false
    description: The number of checksum failures in this database. This metric is tagged
      with db.
    unit: "1"
    sum:
      value_type: int
      input_type: string
      monotonic: true
      aggregation_temporality: cumulative
  postgresql.checksums.enabled:
    attributes:
      - dbname
    enabled: false
    description: Whether database checksums are enabled. Value is always 1 and tagged
      with enabled:true or enabled:false. This metric is tagged with db.
    unit: "1"
    sum:
      value_type: int
      input_type: string
      monotonic: false
      aggregation_temporality: cumulative
  postgresql.conflicts.bufferpin:
    attributes:
      - dbid
      - dbname
    enabled: false 
    description: Number of queries in this database that have been canceled due to pinned
      buffers. Buffer pin conflicts will occur when the walreceiver process tries to
      apply a buffer cleanup like HOT chain pruning. This require a complete lock of
      the buffer and any query pinning the buffer will conflict with the cleaning. This
      metric is tagged with db.
    unit: '{query}'
    sum:
      value_type: int
      input_type: string
      monotonic: true
      aggregation_temporality: cumulative
  postgresql.conflicts.deadlock:
    attributes:
      - dbid
      - dbname
    enabled: false
    description: Number of queries in this database that have been canceled due to deadlocks.
      Deadlock conflicts will happen when the walreceiver tries to apply a buffer like
      HOT chain pruning. If the conflict takes more than deadlock_timeout seconds, a
      deadlock check will be triggered and conflicting queries will be canceled until
      the buffer is unpinned. This metric is tagged with db.
    unit: '{query}'
    sum:
      value_type: int
      input_type: string
      monotonic: true
      aggregation_temporality: cumulative
  postgresql.conflicts.lock:
    attributes:
      - dbid
      - dbname
    enabled: false 
    description: Number of queries in this database that have been canceled due to lock
      timeouts. This will occur when the walreceiver process tries to apply a change
      requiring an ACCESS EXCLUSIVE lock while a query on the replica is reading the
      table. The conflicting query will be killed after waiting up to max_standby_streaming_delay
      seconds. This metric is tagged with db.
    unit: '{query}'
    sum:
      value_type: int
      input_type: string
      monotonic: true
      aggregation_temporality: cumulative
  postgresql.conflicts.snapshot:
    attributes:
      - dbid
      - dbname
    enabled: false
    description: Number of queries in this database that have been canceled due to old
      snapshots. Snapshot conflict will occur when a VACUUM is replayed, removing tuples
      currently read on a standby. This metric is tagged with db.
    unit: '{query}'
    sum:
      value_type: int
      input_type: string
      monotonic: true
      aggregation_temporality: cumulative
  postgresql.conflicts.tablespace:
    attributes:
      - dbid
      - dbname
    enabled: false 
    description: Number of queries in this database that have been canceled due to dropped
      tablespaces. This will occur when a temp_tablespace is dropped while being used
      on a standby. This metric is tagged with db.
    unit: '{query}'
    sum:
      value_type: int
      input_type: string
      monotonic: true
      aggregation_temporality: cumulative
  postgresql.deadlocks.count:
    enabled: false
    description: The number of deadlocks detected in this database. This metric is tagged
      with db.
    unit: '{lock}'
    sum:
      value_type: int
      input_type: string
      monotonic: true
      aggregation_temporality: cumulative
  postgresql.function.calls:
    enabled: false
    description: Enabled with `collect_function_metrics`. The number of calls made to
      a function. This metric is tagged with db, schema, function.
    unit: "1"
    sum:
      value_type: int
      input_type: string
      monotonic: false
      aggregation_temporality: cumulative
  postgresql.function.self_time:
    enabled: false
    description: Enabled with `collect_function_metrics`. Total time spent in this function
      itself, not including other functions called by it. This metric is tagged with
      db, schema, function.
    unit: "1"
    sum:
      value_type: int
      input_type: string
      monotonic: false
      aggregation_temporality: cumulative
  postgresql.function.total_time:
    enabled: false
    description: Enabled with `collect_function_metrics`. Total time spent in this function
      and all other functions called by it. This metric is tagged with db, schema, function.
    unit: "1"
    sum:
      value_type: int
      input_type: string
      monotonic: false
      aggregation_temporality: cumulative
  postgresql.io.evictions:
    attributes:
      - backend_type
    enabled: false 
    description: The number of times a block has been written out from a shared or local
      buffer in order to make it available for another use. This metric is tagged with
      backend_type, context, object. Only available with PostgreSQL 16 and newer. (DBM
      only)
    unit: '{millisecond}'
    sum:
      value_type: int
      input_type: string
      monotonic: true
      aggregation_temporality: cumulative
  postgresql.io.extend_time:
    attributes:
      - backend_type
    enabled: false
    description: The time spent in extend operations (if track_io_timing is enabled,
      otherwise zero). This metric is tagged with backend_type, context, object. Only
      available with PostgreSQL 16 and newer. (DBM only)
    unit: '{millisecond}'
    sum:
      value_type: int
      input_type: string
      monotonic: true
      aggregation_temporality: cumulative
  postgresql.io.extends:
    attributes:
      - backend_type
    enabled: false
    description: The number of relation extend operations. This metric is tagged with
      backend_type, context, object. Only available with PostgreSQL 16 and newer. (DBM
      only)
    unit: "1"
    sum:
      value_type: int
      input_type: string
      monotonic: true
      aggregation_temporality: cumulative
  postgresql.io.fsync_time:
    attributes:
      - backend_type
    enabled: false
    description: The time spent in fsync operations (if track_io_timing is enabled,
      otherwise zero). This metric is tagged with backend_type, context, object. Only
      available with PostgreSQL 16 and newer. (DBM only)
    unit: ms
    sum:
      value_type: double
      input_type: string
      monotonic: true
      aggregation_temporality: cumulative
  postgresql.io.fsyncs:
    attributes:
      - backend_type
    enabled: false
    description: The number of fsync calls. This metric is tagged with backend_type,
      context, object. Only available with PostgreSQL 16 and newer. (DBM only)
    unit: "1"
    sum:
      value_type: int
      input_type: string
      monotonic: true
      aggregation_temporality: cumulative
  postgresql.io.hits:
    attributes:
      - backend_type
    enabled: false
    description: The number of times a desired block was found in a shared buffer. This
      metric is tagged with backend_type, context, object. Only available with PostgreSQL
      16 and newer. (DBM only)
    unit: '{millisecond}'
    sum:
      value_type: int
      input_type: string
      monotonic: true
      aggregation_temporality: cumulative
  postgresql.io.read_time:
    attributes:
      - backend_type
    enabled: false
    description: The time spent in read operations (if track_io_timing is enabled, otherwise
      zero). This metric is tagged with backend_type, context, object. Only available
      with PostgreSQL 16 and newer. (DBM only)
    unit: ms
    sum:
      value_type: double
      input_type: string
      monotonic: true
      aggregation_temporality: cumulative
  postgresql.io.reads:
    attributes:
      - backend_type
    enabled: false
    description: The number of read operations. This metric is tagged with backend_type,
      context, object. Only available with PostgreSQL 16 and newer. (DBM only)
    unit: "1"
    sum:
      value_type: int
      input_type: string
      monotonic: true
      aggregation_temporality: cumulative
  postgresql.io.write_time:
    attributes:
      - backend_type
    enabled: false
    description: The time spent in write operations (if track_io_timing is enabled,
      otherwise zero). This metric is tagged with backend_type, context, object. Only
      available with PostgreSQL 16 and newer. (DBM only)
    unit: ms
    sum:
      value_type: double
      input_type: string
      monotonic: true
      aggregation_temporality: cumulative
  postgresql.io.writes:
    attributes:
      - backend_type
    enabled: false
    description: The number of write operations. This metric is tagged with backend_type,
      context, object. Only available with PostgreSQL 16 and newer. (DBM only)
    unit: "1"
    sum:
      value_type: int
      input_type: string
      monotonic: true
      aggregation_temporality: cumulative
  postgresql.pg_stat_statements.dealloc:
    enabled: false
    description: The number of times pg_stat_statements had to evict least executed
      queries because pg_stat_statements.max was reached.
    unit: "1"
    sum:
      value_type: int
      input_type: string
      monotonic: false
      aggregation_temporality: cumulative
  postgresql.queries.blk_read_time:
    attributes:
      - userid
      - dbid
      - queryid
      - query_statement
    enabled: false 
    description: Total time spent reading blocks per query_signature, db, and user.
      (DBM only)
    unit: ns
    sum:
      value_type: int
      input_type: string
      monotonic: false
      aggregation_temporality: cumulative
  postgresql.queries.blk_write_time:
    attributes:
      - userid
      - dbid
      - queryid
      - query_statement
    enabled: false
    description: Total time spent writing blocks per query_signature, db, and user.
      (DBM only)
    unit: ns
    sum:
      value_type: int
      input_type: string
      monotonic: false
      aggregation_temporality: cumulative
  postgresql.queries.count:
    attributes:
      - userid
      - dbid
      - queryid
      - query_statement
    enabled: false 
    description: The total query execution count per query_signature, db, and user.
      (DBM only)
    unit: '{query}'
    sum:
      value_type: int
      input_type: string
      monotonic: false
      aggregation_temporality: cumulative
  postgresql.queries.local_blks_dirtied:
    attributes:
      - userid
      - dbid
      - queryid
      - query_statement
    enabled: false 
    description: Total number of local blocks dirtied per query_signature, db, and user.
      (DBM only)
    unit: '{block}'
    sum:
      value_type: int
      input_type: string
      monotonic: false
      aggregation_temporality: cumulative
  postgresql.queries.local_blks_hit:
    attributes:
      - userid
      - dbid
      - queryid
      - query_statement
    enabled: false 
    description: Total number of local block cache hits per query_signature, db, and
      user. (DBM only)
    unit: '{block}'
    sum:
      value_type: int
      input_type: string
      monotonic: false
      aggregation_temporality: cumulative
  postgresql.queries.local_blks_read:
    attributes:
      - userid
      - dbid
      - queryid
      - query_statement
    enabled: false 
    description: Total number of local blocks read per query_signature, db, and user.
      (DBM only)
    unit: '{block}'
    sum:
      value_type: int
      input_type: string
      monotonic: false
      aggregation_temporality: cumulative
  postgresql.queries.local_blks_written:
    attributes:
      - userid
      - dbid
      - queryid
      - query_statement
    enabled: false 
    description: Total number of local blocks written per query_signature, db, and user.
      (DBM only)
    unit: '{block}'
    sum:
      value_type: int
      input_type: string
      monotonic: false
      aggregation_temporality: cumulative
  postgresql.queries.rows:
    enabled: false 
    attributes:
      - userid
      - dbid
      - queryid
      - query_statement
    description: The total number of rows retrieved or affected per query_signature,
      db, and user. (DBM only)
    unit: '{row}'
    sum:
      value_type: int
      input_type: string
      monotonic: false
      aggregation_temporality: cumulative
  postgresql.queries.shared_blks_dirtied:
    attributes:
      - userid
      - dbid
      - queryid
      - query_statement
    enabled: false 
    description: Total number of shared blocks dirtied per query_signature, db, and
      user. (DBM only)
    unit: '{block}'
    sum:
      value_type: int
      input_type: string
      monotonic: false
      aggregation_temporality: cumulative
  postgresql.queries.shared_blks_hit:
    attributes:
      - userid
      - dbid
      - queryid
      - query_statement
    enabled: false 
    description: Total number of shared block cache hits per query_signature, db, and
      user. (DBM only)
    unit: '{block}'
    sum:
      value_type: int
      input_type: string
      monotonic: false
      aggregation_temporality: cumulative
  postgresql.queries.shared_blks_read:
    attributes:
      - userid
      - dbid
      - queryid
      - query_statement
    enabled: false 
    description: Total number of shared blocks read per query_signature, db, and user.
      (DBM only)
    unit: '{block}'
    sum:
      value_type: int
      input_type: string
      monotonic: false
      aggregation_temporality: cumulative
  postgresql.queries.shared_blks_written:
    attributes:
      - userid
      - dbid
      - queryid
      - query_statement
    enabled: false 
    description: Total number of shared blocks written per query_signature, db, and
      user. (DBM only)
    unit: '{block}'
    sum:
      value_type: int
      input_type: string
      monotonic: false
      aggregation_temporality: cumulative
  postgresql.queries.temp_blks_read:
    attributes:
      - userid
      - dbid
      - queryid
      - query_statement
    enabled: false 
    description: Total number of temp blocks read per query_signature, db, and user.
      (DBM only)
    unit: '{block}'
    sum:
      value_type: int
      input_type: string
      monotonic: false
      aggregation_temporality: cumulative
  postgresql.queries.temp_blks_written:
    attributes:
      - userid
      - dbid
      - queryid
      - query_statement
    enabled: false 
    description: Total number of temp blocks written per query_signature, db, and user.
      (DBM only)
    unit: '{block}'
    sum:
      value_type: int
      input_type: string
      monotonic: false
      aggregation_temporality: cumulative
  postgresql.queries.time:
    attributes:
      - userid
      - dbid
      - queryid
      - query_statement
    enabled: false 
    description: The total query execution time per query_signature, db, and user. (DBM
      only)
    unit: ns
    sum:
      value_type: int
      input_type: string
      monotonic: false
      aggregation_temporality: cumulative
  postgresql.replication_slot.spill_bytes:
    enabled: false
    description: Amount of decoded transaction data spilled to disk while performing
      decoding of changes from WAL for this slot. This and other spill counters can
      be used to gauge the I/O occurred during logical decoding and allow tuning logical_decoding_work_mem.
      Extracted from pg_stat_replication_slots. Only available with PostgreSQL 14 and
      newer. This metric is tagged with slot_name, slot_type, slot_state.
    unit: By
    sum:
      value_type: int
      input_type: string
      monotonic: true
      aggregation_temporality: cumulative
  postgresql.replication_slot.spill_count:
    enabled: false
    description: Number of times transactions were spilled to disk while decoding changes
      from WAL for this slot. This counter is incremented each time a transaction is
      spilled, and the same transaction may be spilled multiple times. Extracted from
      pg_stat_replication_slots. Only available with PostgreSQL 14 and newer. This metric
      is tagged with slot_name, slot_type, slot_state.
    unit: "1"
    sum:
      value_type: int
      input_type: string
      monotonic: true
      aggregation_temporality: cumulative
  postgresql.replication_slot.spill_txns:
    enabled: false
    description: Number of transactions spilled to disk once the memory used by logical
      decoding to decode changes from WAL has exceeded logical_decoding_work_mem. The
      counter gets incremented for both top-level transactions and subtransactions.
      Extracted from pg_stat_replication_slots. Only available with PostgreSQL 14 and
      newer. This metric is tagged with slot_name, slot_type, slot_state.
    unit: '{transaction}'
    sum:
      value_type: int
      input_type: string
      monotonic: true
      aggregation_temporality: cumulative
  postgresql.replication_slot.stream_bytes:
    enabled: false
    description: Amount of transaction data decoded for streaming in-progress transactions
      to the decoding output plugin while decoding changes from WAL for this slot. Extracted
      from pg_stat_replication_slots. Only available with PostgreSQL 14 and newer. This
      metric is tagged with slot_name, slot_type, slot_state.
    unit: By
    sum:
      value_type: int
      input_type: string
      monotonic: true
      aggregation_temporality: cumulative
  postgresql.replication_slot.stream_count:
    enabled: false
    description: Number of times in-progress transactions were streamed to the decoding
      output plugin while decoding changes from WAL for this slot. Extracted from pg_stat_replication_slots.
      Only available with PostgreSQL 14 and newer. This metric is tagged with slot_name,
      slot_type, slot_state.
    unit: "1"
    sum:
      value_type: int
      input_type: string
      monotonic: true
      aggregation_temporality: cumulative
  postgresql.replication_slot.stream_txns:
    enabled: false
    description: Number of in-progress transactions streamed to the decoding output
      plugin after the memory used by logical decoding to decode changes from WAL for
      this slot has exceeded logical_decoding_work_mem. Extracted from pg_stat_replication_slots.
      Only available with PostgreSQL 14 and newer. This metric is tagged with slot_name,
      slot_type, slot_state.
    unit: '{transaction}'
    sum:
      value_type: int
      input_type: string
      monotonic: true
      aggregation_temporality: cumulative
  postgresql.replication_slot.total_bytes:
    enabled: false
    description: Amount of transaction data decoded for sending transactions to the
      decoding output plugin while decoding changes from WAL for this slot. Extracted
      from pg_stat_replication_slots. Only available with PostgreSQL 14 and newer. This
      metric is tagged with slot_name, slot_type, slot_state.
    unit: By
    sum:
      value_type: int
      input_type: string
      monotonic: true
      aggregation_temporality: cumulative
  postgresql.replication_slot.total_txns:
    enabled: false
    description: Number of decoded transactions sent to the decoding output plugin for
      this slot. Extracted from pg_stat_replication_slots. Only available with PostgreSQL
      14 and newer. This metric is tagged with slot_name, slot_type, slot_state.
    unit: '{transaction}'
    sum:
      value_type: int
      input_type: string
      monotonic: true
      aggregation_temporality: cumulative
  postgresql.sessions.abandoned:
    attributes:
      - dbid
      - dbname
    enabled: false 
    description: Number of database sessions to this database that were terminated because
      connection to the client was lost. This metric is tagged with db.
    unit: '{session}'
    sum:
      value_type: int
      input_type: string
      monotonic: true
      aggregation_temporality: cumulative
  postgresql.sessions.active_time:
    attributes:
      - dbid
      - dbname
    enabled: false 
    description: Time spent executing SQL statements in this database, in milliseconds
      (this corresponds to the states active and fastpath function call in pg_stat_activity).
      This metric is tagged with db.
    unit: '{millisecond}'
    sum:
      value_type: int
      input_type: string
      monotonic: true
      aggregation_temporality: cumulative
  postgresql.sessions.count:
    attributes:
      - dbid
      - dbname
    enabled: false 
    description: Total number of sessions established to this database. This metric
      is tagged with db.
    unit: '{session}'
    sum:
      value_type: int
      input_type: string
      monotonic: true
      aggregation_temporality: cumulative
  postgresql.sessions.fatal:
    attributes:
      - dbid
      - dbname
    enabled: false 
    description: Number of database sessions to this database that were terminated by
      fatal errors. This metric is tagged with db.
    unit: '{session}'
    sum:
      value_type: int
      input_type: string
      monotonic: true
      aggregation_temporality: cumulative
  postgresql.sessions.idle_in_transaction_time:
    attributes:
      - dbid
      - dbname
    enabled: false  
    description: Time spent idling while in a transaction in this database, in milliseconds
      (this corresponds to the states idle in transaction and idle in transaction (aborted)
      in pg_stat_activity). This metric is tagged with db.
    unit: '{millisecond}'
    sum:
      value_type: int
      input_type: string
      monotonic: true
      aggregation_temporality: cumulative
  postgresql.sessions.killed:
    attributes:
      - dbid
      - dbname
    enabled: false 
    description: Number of database sessions to this database that were terminated by
      operator intervention. This metric is tagged with db.
    unit: '{session}'
    sum:
      value_type: int
      input_type: string
      monotonic: true
      aggregation_temporality: cumulative
  postgresql.sessions.session_time:
    attributes:
      - dbid
      - dbname
    enabled: false 
    description: Time spent by database sessions in this database, in milliseconds (note
      that statistics are only updated when the state of a session changes, so if sessions
      have been idle for a long time, this idle time won't be included). This metric
      is tagged with db.
    unit: '{millisecond}'
    sum:
      value_type: int
      input_type: string
      monotonic: true
      aggregation_temporality: cumulative
  postgresql.slru.blks_exists:
    enabled: false
    description: Number of blocks checked for existence for SLRU (simple least-recently-used)
      cache. Only CommitTs and MultiXactOffset caches are checking if blocks are already
      present on disk. This metric is tagged with slru_name.
    unit: '{block}'
    sum:
      value_type: int
      input_type: string
      monotonic: true
      aggregation_temporality: cumulative
  postgresql.slru.blks_hit:
    enabled: false
    description: Number of tim'f', -1, 64)es disk blocks were found already in the SLRU (simple
      least-recently-used), so that a read was not necessary (this only includes hits
      in the SLRU, not the operating system's file system cache). This metric is tagged
      with slru_name.
    unit: '{block}'
    sum:
      value_type: int
      input_type: string
      monotonic: true
      aggregation_temporality: cumulative
  postgresql.slru.blks_read:
    enabled: false
    description: Number of disk blocks read for SLRU (simple least-recently-used) cache.
      SLRU caches are created with a fixed number of pages. When all pages are used,
      the least recently used block is dumped on disk to create space. Access to the
      evicted block will require data to be read from the disk and loaded back in an
      SLRU cache page, increasing the block read count. This metric is tagged with slru_name.
    unit: '{block}'
    sum:
      value_type: int
      input_type: string
      monotonic: true
      aggregation_temporality: cumulative
  postgresql.slru.blks_written:
    enabled: false
    description: Number of disk blocks written for SLRU (simple least-recently-used)
      cache. SLRU caches are created with a fixed number of pages. When all pages are
      used, the least recently used block is dumped on disk to create space. A block
      eviction doesn't necessarily generate disk write as the block could have been
      written in a previous eviction. This metric is tagged with slru_name.
    unit: '{block}'
    sum:
      value_type: int
      input_type: string
      monotonic: true
      aggregation_temporality: cumulative
  postgresql.slru.blks_zeroed:
    enabled: false
    description: Number of blocks zeroed during initializations of SLRU (simple least-recently-used)
      cache. SLRU caches are created with a fixed number of pages. For Subtrans, Xact
      and CommitTs caches, the global transactionId is used to get the page number.
      Thus, it will increase with the transaction throughput. This metric is tagged
      with slru_name.
    unit: '{block}'
    sum:
      value_type: int
      input_type: string
      monotonic: true
      aggregation_temporality: cumulative
  postgresql.slru.flushes:
    enabled: false
    description: Number of flush of dirty data for SLRU (simple least-recently-used)
      cache. CommitTs, MultiXact, Subtrans, Xact caches flush will happen during checkpoint.
      MultiXact cache flush may happen during vacuum. This metric is tagged with slru_name.
    unit: "1"
    sum:
      value_type: int
      input_type: string
      monotonic: true
      aggregation_temporality: cumulative
  postgresql.slru.truncates:
    enabled: false
    description: Number of truncates for SLRU (simple least-recently-used) cache. For
      CommitTs, Xact and MultiXact, truncates will happen when the frozenID progresses.
      For Subtrans, a truncate can occur during restartpoint and a checkpoint. This
      metric is tagged with slru_name.
    unit: "1"
    sum:
      value_type: int
      input_type: string
      monotonic: true
      aggregation_temporality: cumulative
  postgresql.subscription.apply_error:
    enabled: false
    description: Number of errors that occurred while applying changes. Extracted from
      pg_stat_subscription_stats. Only available on PostgreSQL 15 or higher. This metric
      is tagged with subscription_name.
    unit: "1"
    sum:
      value_type: int
      input_type: string
      monotonic: true
      aggregation_temporality: cumulative
  postgresql.subscription.sync_error:
    enabled: false
    description: Number of errors that occurred during the initial table synchronization.
      Extracted from pg_stat_subscription_stats. Only available on PostgreSQL 15 or
      higher. This metric is tagged with subscription_name.
    unit: "1"
    sum:
      value_type: int
      input_type: string
      monotonic: true
      aggregation_temporality: cumulative
  postgresql.vacuumed:
    enabled: false
    description: Enabled with `relations`. The number of times this table has been manually
      vacuumed. This metric is tagged with db, schema, table.
    unit: "1"
    sum:
      value_type: int
      input_type: string
      monotonic: false
      aggregation_temporality: cumulative
  postgresql.wal.buffers_full:
    enabled: false
    description: Number of times WAL data was written to disk because WAL buffers became
      full. WAL changes are stored in WAL buffers first. If the buffer is full, WAL
      insertions will be blocked until buffer is flushed. The size of this buffer is
      set by wal_buffers configuration. By default, it will use 3% of the shared_buffers
      value.
    unit: "1"
    sum:
      value_type: int
      input_type: string
      monotonic: true
      aggregation_temporality: cumulative
  postgresql.wal.bytes:
    enabled: false
    description: Total amount of WAL generated in bytes.
    unit: By
    sum:
      value_type: int
      input_type: string
      monotonic: true
      aggregation_temporality: cumulative
  postgresql.wal.full_page_images:
    enabled: false
    description: Total number of WAL full page images generated. Full page write will
      happen when a block is modified for the first time after a checkpoint.
    unit: '{page}'
    sum:
      value_type: int
      input_type: string
      monotonic: true
      aggregation_temporality: cumulative
  postgresql.wal.records:
    enabled: false
    description: Total number of WAL records generated.
    unit: '{record}'
    sum:
      value_type: int
      input_type: string
      monotonic: true
      aggregation_temporality: cumulative
  postgresql.wal.sync:
    enabled: false
    description: Number of times WAL files were synced to disk.
    unit: "1"
    sum:
      value_type: int
      input_type: string
      monotonic: true
      aggregation_temporality: cumulative
  postgresql.wal.sync_time:
    enabled: false
    description: Total amount of time spent syncing WAL files to disk, in milliseconds
      (if track_wal_io_timing is enabled, fsync is on, and wal_sync_method is either
      fdatasync, fsync or fsync_writethrough, otherwise zero).
    unit: '{millisecond}'
    sum:
      value_type: int
      input_type: string
      monotonic: true
      aggregation_temporality: cumulative
  postgresql.wal.write:
    enabled: false
    description: Number of times WAL buffers were written out to disk.
    unit: '{write}'
    sum:
      value_type: int
      input_type: string
      monotonic: true
      aggregation_temporality: cumulative
  postgresql.wal.write_time:
    enabled: false
    description: Total amount of time spent writing WAL buffers to disk, in milliseconds
      (if track_wal_io_timing is enabled, otherwise zero).
    unit: '{millisecond}'
    sum:
      value_type: int
      input_type: string
      monotonic: true
      aggregation_temporality: cumulative
  postgresql.active_queries:
    attributes:
      - query_statement 
    enabled: false
    description: Enabled with `collect_activity_metrics`. The number of active queries
      in this database. This metric (by default) is tagged with db, app, user.
    unit: "1"
    gauge:
      value_type: int
  postgresql.active_waiting_queries:
    attributes:
      - query_statement 
    enabled: false
    description: Enabled with `collect_activity_metrics`. The number of waiting queries
      in this database in state active. This metric (by default) is tagged with db,
      app, user.
    unit: "1"
    gauge:
      value_type: int
  postgresql.activity.backend_xid_age:
    attributes:
      - query_statement 
    enabled: false
    description: The age of the oldest backend's xid relative to latest stable xid.
      This metric (by default) is tagged with db, app, user.
    unit: '{transaction}'
    gauge:
      value_type: int
  postgresql.activity.backend_xmin_age:
    attributes:
      - query_statement 
    enabled: false
    description: The age of the oldest backend's xmin horizon relative to latest stable
      xid. This metric (by default) is tagged with db, app, user.
    unit: '{transaction}'
    gauge:
      value_type: int
  postgresql.activity.xact_start_age:
    attributes:
      - query_statement 
    enabled: false 
    description: The age of the oldest active transactions. This metric (by default)
      is tagged with db, app, user.
    unit: s
    gauge:
      value_type: double
  postgresql.analyze.child_tables_done:
    enabled: false
    description: Number of child tables scanned. This counter only advances when the
      phase is acquiring inherited sample rows. This metric is tagged with db, table,
      child_relation, phase.
    unit: "1"
    gauge:
      value_type: int
  postgresql.analyze.child_tables_total:
    enabled: false
    description: Number of child tables. This metric is tagged with db, table, child_relation,
      phase.
    unit: "1"
    gauge:
      value_type: int
  postgresql.analyze.ext_stats_computed:
    enabled: false
    description: Number of extended statistics computed. This counter only advances
      when the phase is computing extended statistics. This metric is tagged with db,
      table, child_relation, phase.
    unit: "1"
    gauge:
      value_type: int
  postgresql.analyze.ext_stats_total:
    enabled: false
    description: Number of extended statistics. This metric is tagged with db, table,
      child_relation, phase.
    unit: "1"
    gauge:
      value_type: int
  postgresql.analyze.sample_blks_scanned:
    enabled: false
    description: Number of heap blocks scanned. This metric is tagged with db, table,
      child_relation, phase.
    unit: '{block}'
    gauge:
      value_type: int
  postgresql.analyze.sample_blks_total:
    enabled: false
    description: Total number of heap blocks that will be sampled. This metric is tagged
      with db, table, child_relation, phase.
    unit: '{block}'
    gauge:
      value_type: int
  postgresql.before_xid_wraparound:
    enabled: false
    description: The number of transactions that can occur until a transaction wraparound.  This
      metric is tagged with db.
    unit: '{transaction}'
    gauge:
      value_type: int
  postgresql.buffer_hit:
    attributes:
      - dbname
    enabled: false
    description: The number of times disk blocks were found in the buffer cache, preventing
      the need to read from the database. This metric is tagged with db.
    unit: '{hit}/s'
    gauge:
      value_type: int
  postgresql.cluster_vacuum.heap_blks_scanned:
    attributes:
      - dbname
      - relname
      - command
      - phase
      - index
    enabled: false 
    description: Number of heap blocks scanned. This counter only advances when the
      phase is seq scanning heap. Only available with PostgreSQL 12 and newer. This
      metric is tagged with db, table, command, phase, index.
    unit: '{block}'
    gauge:
      value_type: int
  postgresql.cluster_vacuum.heap_blks_total:
    attributes:
      - dbname
      - relname
      - command
      - phase
      - index
    enabled: false 
    description: Total number of heap blocks in the table. This number is reported as
      of the beginning of seq scanning heap. Only available with PostgreSQL 12 and newer.
      This metric is tagged with db, table, command, phase, index.
    unit: '{block}'
    gauge:
      value_type: int
  postgresql.cluster_vacuum.heap_tuples_scanned:
    attributes:
      - dbname
      - relname
      - command
      - phase
      - index
    enabled: false 
    description: Number of heap tuples scanned. This counter only advances when the
      phase is seq scanning heap, index scanning heap or writing new heap. Only available
      with PostgreSQL 12 and newer. This metric is tagged with db, table, command, phase,
      index.
    unit: "1"
    gauge:
      value_type: int
  postgresql.cluster_vacuum.heap_tuples_written:
    attributes:
      - dbname
      - relname
      - command
      - phase
      - index
    enabled: false 
    description: Number of heap tuples written. This counter only advances when the
      phase is seq scanning heap, index scanning heap or writing new heap. Only available
      with PostgreSQL 12 and newer. This metric is tagged with db, table, command, phase,
      index.
    unit: "1"
    gauge:
      value_type: int
  postgresql.cluster_vacuum.index_rebuild_count:
    attributes:
      - dbname
      - relname
      - command
      - phase
      - index
    enabled: false  
    description: Number of indexes rebuilt. This counter only advances when the phase
      is rebuilding index. Only available with PostgreSQL 12 and newer. This metric
      is tagged with db, table, command, phase, index.
    unit: "1"
    gauge:
      value_type: int
  postgresql.commits:
    attributes:
      - dbid
      - dbname
    enabled: false 
    description: The number of transactions that have been committed in this database.
      This metric is tagged with db.
    unit: '{transaction}/s'
    gauge:
      value_type: int
  postgresql.connections:
    enabled: false
    description: The number of active connections to this database. If DBM is enabled,
      this metric is tagged with state, app, db and user
    unit: '{connection}'
    gauge:
      value_type: int
  postgresql.control.checkpoint_delay:
    enabled: false
    description: The time since the last checkpoint.
    unit: '{second}'
    gauge:
      value_type: int
  postgresql.control.timeline_id:
    enabled: false
    description: The current timeline id.
    unit: "1"
    gauge:
      value_type: int
  postgresql.create_index.blocks_done:
    enabled: false
    description: Number of blocks already processed in the current phase. Only available
      with PostgreSQL 12 and newer. This metric is tagged with db, table, index, command,
      phase.
    unit: "1"
    gauge:
      value_type: int
  postgresql.create_index.blocks_total:
    enabled: false
    description: Total number of blocks to be processed in the current phase. Only available
      with PostgreSQL 12 and newer. This metric is tagged with db, table, index, command,
      phase.
    unit: "1"
    gauge:
      value_type: int
  postgresql.create_index.lockers_done:
    enabled: false
    description: Number of lockers already waited for. Only available with PostgreSQL
      12 and newer. This metric is tagged with db, table, index, command, phase.
    unit: "1"
    gauge:
      value_type: int
  postgresql.create_index.lockers_total:
    enabled: false
    description: Total number of lockers to wait for, when applicable. Only available
      with PostgreSQL 12 and newer. This metric is tagged with db, table, index, command,
      phase.
    unit: "1"
    gauge:
      value_type: int
  postgresql.create_index.partitions_done:
    enabled: false
    description: When creating an index on a partitioned table, this column is set to
      the number of partitions on which the index has been created. This field is 0
      during a REINDEX. Only available with PostgreSQL 12 and newer. This metric is
      tagged with db, table, index, command, phase.
    unit: "1"
    gauge:
      value_type: int
  postgresql.create_index.partitions_total:
    enabled: false
    description: When creating an index on a partitioned table, this column is set to
      the total number of partitions on which the index is to be created. This field
      is 0 during a REINDEX. Only available with PostgreSQL 12 and newer. This metric
      is tagged with db, table, index, command, phase.
    unit: "1"
    gauge:
      value_type: int
  postgresql.create_index.tuples_done:
    enabled: false
    description: Number of tuples already processed in the current phase. Only available
      with PostgreSQL 12 and newer. This metric is tagged with db, table, index, command,
      phase.
    unit: "1"
    gauge:
      value_type: int
  postgresql.create_index.tuples_total:
    enabled: false
    description: Total number of tuples to be processed in the current phase. Only available
      with PostgreSQL 12 and newer. This metric is tagged with db, table, index, command,
      phase.
    unit: "1"
    gauge:
      value_type: int
  postgresql.database_size:
    enabled: false
    description: The disk space used by this database. This metric is tagged with db.
    unit: By
    gauge:
      value_type: int
  postgresql.db.count:
    enabled: false
    description: The number of available databases.
    unit: '{item}'
    gauge:
      value_type: int
  postgresql.dead_rows:
    enabled: false
    description: Enabled with `relations`. The estimated number of dead rows. This metric
      is tagged with db, schema, table.
    unit: '{row}'
    gauge:
      value_type: int
  postgresql.disk_read:
    attributes:
      - dbid
      - dbname
    enabled: true
    description: The number of disk blocks read in this database. This metric is tagged
      with db.
    unit: '{block}/s'
    gauge:
      value_type: int
  postgresql.heap_blocks_hit:
    enabled: false
    description: Enabled with `relations`. The number of buffer hits in this table.
      This metric is tagged with db, schema, table.
    unit: '{hit}/s'
    gauge:
      value_type: int
  postgresql.heap_blocks_read:
    enabled: false
    description: Enabled with `relations`. The number of disk blocks read from this
      table. This metric is tagged with db, schema, table.
    unit: '{block}/s'
    gauge:
      value_type: int
  postgresql.index_bloat:
    enabled: false
    description: Enabled with `collect_bloat_metrics`. The estimated percentage of index
      bloat. This metric is tagged with db, schema, table, index.
    unit: '{percent}'
    gauge:
      value_type: int
  postgresql.index_blocks_hit:
    enabled: false
    description: Enabled with `relations`. The number of buffer hits in all indexes
      on this table. This metric is tagged with db, schema, table.
    unit: '{hit}/s'
    gauge:
      value_type: int
  postgresql.index_blocks_read:
    enabled: false
    description: Enabled with `relations`. The number of disk blocks read from all indexes
      on this table. This metric is tagged with db, schema, table.
    unit: '{block}/s'
    gauge:
      value_type: int
  postgresql.index_rel_rows_fetched:
    enabled: false
    description: Enabled with `relations`. The number of live rows fetched by index
      scans. This metric is tagged with db, schema, table.
    unit: '{row}/s'
    gauge:
      value_type: int
  postgresql.index_rel_scans:
    enabled: false
    description: Enabled with `relations`. The overall number of index scans initiated
      on this table. This metric is tagged with db, schema, table.
    unit: '{scan}/s'
    gauge:
      value_type: int
  postgresql.index_rows_fetched:
    enabled: false
    description: Enabled with `relations`. The number of live rows fetched by index
      scans. This metric is tagged with db, schema, table, index.
    unit: '{row}/s'
    gauge:
      value_type: int
  postgresql.index_rows_read:
    enabled: false
    description: Enabled with `relations`. The number of index entries returned by scans
      on this index. This metric is tagged with db, schema, table, index.
    unit: '{row}/s'
    gauge:
      value_type: int
  postgresql.individual_index_size:
    enabled: false
    description: The disk space used by a specified index. This metric is tagged with
      db, schema, table, index.
    unit: By
    gauge:
      value_type: int
  postgresql.last_analyze_age:
    enabled: false
    description: Last time at which this table was manually analyzed. This metric is
      tagged with db, schema, table.
    unit: '{second}'
    gauge:
      value_type: int
  postgresql.last_autoanalyze_age:
    enabled: false
    description: Last time at which this table was analyzed by the autovacuum daemon.
      This metric is tagged with db, schema, table.
    unit: '{second}'
    gauge:
      value_type: int
  postgresql.last_autovacuum_age:
    enabled: false
    description: Last time at which this table was vacuumed by the autovacuum daemon.
      This metric is tagged with db, schema, table.
    unit: '{second}'
    gauge:
      value_type: int
  postgresql.last_vacuum_age:
    enabled: false
    description: Last time at which this table was manually vacuumed (not counting VACUUM
      FULL). This metric is tagged with db, schema, table.
    unit: '{second}'
    gauge:
      value_type: int
  postgresql.live_rows:
    enabled: false
    description: Enabled with `relations`. The estimated number of live rows. This metric
      is tagged with db, schema, table.
    unit: '{row}'
    gauge:
      value_type: int
  postgresql.locks:
    enabled: false
    description: Enabled with `relations`. The number of locks active for this database.
      This metric is tagged with db, lock_mode, lock_type, schema, table, granted.
    unit: '{lock}'
    gauge:
      value_type: int
  postgresql.max_connections:
    enabled: false
    description: The maximum number of client connections allowed to this database.
    unit: '{connection}'
    gauge:
      value_type: int
  postgresql.percent_usage_connections:
    enabled: false
    description: The number of connections to this database as a fraction of the maximum
      number of allowed connections.
    unit: '{fraction}'
    gauge:
      value_type: int
  postgresql.queries.duration.max:
    enabled: false
    description: The age of the longest running query per user, db and app. (DBM only)
    unit: ns
    gauge:
      value_type: double
  postgresql.queries.duration.sum:
    enabled: false
    description: The sum of the age of all running queries per user, db and app. (DBM
      only)
    unit: ns
    gauge:
      value_type: double
  postgresql.relation.all_visible:
    enabled: false
    description: Number of pages that are marked as all visible in the table's visibility
      map. This is only an estimation used by the planner and is updated by VACUUM or
      ANALYZE. This metric is tagged with db, schema, table, partition_of
    unit: "1"
    gauge:
      value_type: int
  postgresql.relation.pages:
    enabled: false
    description: Size of a table in pages (1 page == 8KB by default). This is only an
      estimation used by the planner and is updated by VACUUM or ANALYZE. This metric
      is tagged with db, schema, table, partition_of.
    unit: "1"
    gauge:
      value_type: int
  postgresql.relation.tuples:
    enabled: false
    description: Number of live rows in the table. This is only an estimation used by
      the planner and is updated by VACUUM or ANALYZE. If the table has never been vacuumed
      or analyze, -1 will be reported. This metric is tagged with db, schema, table,
      partition_of
    unit: "1"
    gauge:
      value_type: int
  postgresql.relation_size:
    enabled: false
    description: The disk space used by the specified table. TOAST data, indexes, free
      space map and visibility map are not included. This metric is tagged with db,
      schema, table.
    unit: By
    gauge:
      value_type: int
  postgresql.replication.backend_xmin_age:
    enabled: false
    description: The age of the standby server's xmin horizon (relative to latest stable
      xid) reported by hot_standby_feedback.
    unit: "1"
    gauge:
      value_type: int
  postgresql.replication.wal_flush_lag:
    enabled: false
    description: Time elapsed between flushing recent WAL locally and receiving notification
      that this standby server has written and flushed it (but not yet applied it).
      This can be used to gauge the delay that synchronous_commit level on incurred
      while committing if this server was configured as a synchronous standby. Only
      available with postgresql 10 and newer.
    unit: '{second}'
    gauge:
      value_type: int
  postgresql.replication.wal_replay_lag:
    enabled: false
    description: Time elapsed between flushing recent WAL locally and receiving notification
      that this standby server has written, flushed and applied it. This can be used
      to gauge the delay that synchronous_commit level remote_apply incurred while committing
      if this server was configured as a synchronous standby. Only available with postgresql
      10 and newer.
    unit: '{second}'
    gauge:
      value_type: int
  postgresql.replication.wal_write_lag:
    enabled: false
    description: Time elapsed between flushing recent WAL locally and receiving notification
      that this standby server has written it (but not yet flushed it or applied it).
      This can be used to gauge the delay that synchronous_commit level remote_write
      incurred while committing if this server was configured as a synchronous standby.
      Only available with postgresql 10 and newer.
    unit: '{second}'
    gauge:
      value_type: int
  postgresql.replication_delay:
    enabled: false
    description: The current replication delay in seconds. Only available with postgresql
      9.1 and newer
    unit: '{second}'
    gauge:
      value_type: int
  postgresql.replication_delay_bytes:
    enabled: false
    description: The current replication delay in bytes. Only available with postgresql
      9.2 and newer
    unit: By
    gauge:
      value_type: int
  postgresql.replication_slot.confirmed_flush_delay_bytes:
    enabled: false
    description: The delay in bytes between the current WAL position and last position
      this slot's consumer confirmed. This is only available for logical replication
      slots. This metric is tagged with slot_name, slot_type, slot_persistence, slot_state.
    unit: By
    gauge:
      value_type: int
  postgresql.replication_slot.restart_delay_bytes:
    enabled: false
    description: The amount of WAL bytes that the consumer of this slot may require
      and won't be automatically removed during checkpoints unless it exceeds max_slot_wal_keep_size
      parameter. Nothing is reported if there's no WAL reservation for this slot. This
      metric is tagged with slot_name, slot_type, slot_persistence, slot_state.
    unit: By
    gauge:
      value_type: int
  postgresql.replication_slot.xmin_age:
    enabled: false
    description: The age of the oldest transaction that this slot needs the database
      to retain. Only physical replication slot will have a xmin. Orphaned replication
      slot (no consumer or consumer is not connected) will prevent the xmin horizon
      from progressing. This metric is tagged with slot_name, slot_type, slot_persistence,
      slot_state.
    unit: '{transaction}'
    gauge:
      value_type: int
  postgresql.rollbacks:
    enabled: false
    description: The number of transactions that have been rolled back in this database.
      This metric is tagged with db.
    unit: '{transaction}/s'
    gauge:
      value_type: int
  postgresql.rows_deleted:
    enabled: false
    description: Enabled with `relations`. The number of rows deleted by queries in
      this database. This metric is tagged with db.
    unit: '{row}/s'
    gauge:
      value_type: int
  postgresql.rows_fetched:
    enabled: false
    description: The number of rows fetched by queries in this database. This metric
      is tagged with db.
    unit: '{row}/s'
    gauge:
      value_type: int
  postgresql.rows_hot_updated:
    enabled: false
    description: Enabled with `relations`. The number of rows HOT updated, meaning no
      separate index update was needed. This metric is tagged with db, schema, table.
    unit: '{row}/s'
    gauge:
      value_type: int
  postgresql.rows_inserted:
    enabled: false
    description: Enabled with `relations`. The number of rows inserted by queries in
      this database. This metric is tagged with db.
    unit: '{row}/s'
    gauge:
      value_type: int
  postgresql.rows_returned:
    enabled: false
    description: The number of rows returned by queries in this database. This metric
      is tagged with db.
    unit: '{row}/s'
    gauge:
      value_type: int
  postgresql.rows_updated:
    enabled: false
    description: Enabled with `relations`. The number of rows updated by queries in
      this database. This metric is tagged with db.
    unit: '{row}/s'
    gauge:
      value_type: int
  postgresql.running:
    enabled: false
    description: The number of instances running.
    unit: "1"
    gauge:
      value_type: int
  postgresql.seq_rows_read:
    enabled: false
    description: Enabled with `relations`. The number of live rows fetched by sequential
      scans. This metric is tagged with db, schema, table.
    unit: '{row}/s'
    gauge:
      value_type: int
  postgresql.seq_scans:
    enabled: false
    description: Enabled with `relations`. The number of sequential scans initiated
      on this table. This metric is tagged with db, schema, table.
    unit: '{scan}/s'
    gauge:
      value_type: int
  postgresql.snapshot.xip_count:
    enabled: false
    description: Report the number of active transactions based on pg_snapshot_xip(pg_current_snapshot()).
    unit: "1"
    gauge:
      value_type: int
  postgresql.snapshot.xmax:
    enabled: false
    description: Report the next transaction ID that will be assigned based on pg_snapshot_xmax(pg_current_snapshot()).
    unit: "1"
    gauge:
      value_type: int
  postgresql.snapshot.xmin:
    enabled: false
    description: Report the lowest transaction ID still active based on pg_snapshot_xmin(pg_current_snapshot()).
      All transaction IDs less than xmin are either committed and visible, or rolled
      back and dead.
    unit: "1"
    gauge:
      value_type: int
  postgresql.subscription.last_msg_receipt_age:
    enabled: false
    description: Age of receipt time of the last message received from origin WAL sender.
      Extracted from pg_stat_subscription. Only available on PostgreSQL 12 or higher.
      This metric is tagged with subscription_name.
    unit: '{second}'
    gauge:
      value_type: int
  postgresql.subscription.last_msg_send_age:
    enabled: false
    description: Age of last message received from origin WAL sender. Extracted from
      pg_stat_subscription. Only available on PostgreSQL 12 or higher. This metric is
      tagged with subscription_name.
    unit: '{second}'
    gauge:
      value_type: int
  postgresql.subscription.latest_end_age:
    enabled: false
    description: Age of last write-ahead log location reported to origin WAL sender.
      Extracted from pg_stat_subscription. Only available on PostgreSQL 12 or higher.
      This metric is tagged with subscription_name.
    unit: '{second}'
    gauge:
      value_type: int
  postgresql.subscription.state:
    enabled: false
    description: State of a subscription per relation and subscription. Extracted from
      pg_subscription_rel. Only available on PostgreSQL 14 or higher. This metric is
      tagged with subscription_name, relation, state.
    unit: "1"
    gauge:
      value_type: int
  postgresql.table_bloat:
    enabled: false
    description: Enabled with `collect_bloat_metrics`. The estimated percentage of table
      bloat. This metric is tagged with db, schema, table.
    unit: '{percent}'
    gauge:
      value_type: int
  postgresql.temp_bytes:
    enabled: false
    description: The amount of data written to temporary files by queries in this database.
      This metric is tagged with db.
    unit: By
    gauge:
      value_type: int
  postgresql.toast_blocks_hit:
    enabled: false
    description: Enabled with `relations`. The number of buffer hits in this table's
      TOAST table. This metric is tagged with db, schema, table.
    unit: '{hit}/s'
    gauge:
      value_type: int
  postgresql.toast_blocks_read:
    enabled: false
    description: Enabled with `relations`. The number of disk blocks read from this
      table's TOAST table. This metric is tagged with db, schema, table.
    unit: '{block}/s'
    gauge:
      value_type: int
  postgresql.toast_index_blocks_hit:
    enabled: false
    description: Enabled with `relations`. The number of buffer hits in this table's
      TOAST table index. This metric is tagged with db, schema, table.
    unit: '{block}/s'
    gauge:
      value_type: int
  postgresql.toast_index_blocks_read:
    enabled: false
    description: Enabled with `relations`. The number of disk blocks read from this
      table's TOAST table index. This metric is tagged with db, schema, table.
    unit: '{block}/s'
    gauge:
      value_type: int
  postgresql.toast_size:
    enabled: false
    description: The total disk space used by the toast table attached to the specified
      table. This metric is tagged with db, schema, table.
    unit: By
    gauge:
      value_type: int
  postgresql.total_size:
    enabled: false
    description: Enabled with `relations`. The total disk space used by the table, including
      indexes and TOAST data. This metric is tagged with db, schema, table.
    unit: By
    gauge:
      value_type: int
  postgresql.transactions.duration.max:
    enabled: false
    description: The age of the longest running transaction per user, db and app. (DBM
      only)
    unit: ns
    gauge:
      value_type: int
  postgresql.transactions.duration.sum:
    enabled: false
    description: The sum of the age of all running transactions per user, db and app.
      (DBM only)
    unit: ns
    gauge:
      value_type: int
  postgresql.transactions.idle_in_transaction:
    enabled: false
    description: Enabled with `collect_activity_metrics`. The number of 'idle in transaction'
      transactions in this database. This metric (by default) is tagged with db, app,
      user.
    unit: '{transaction}'
    gauge:
      value_type: int
  postgresql.transactions.open:
    enabled: false
    description: Enabled with `collect_activity_metrics`. The number of open transactions
      in this database. This metric (by default) is tagged with db, app, user.
    unit: '{transaction}'
    gauge:
      value_type: int
  postgresql.uptime:
    enabled: false
    description: The uptime of the server in seconds.
    unit: '{second}'
    gauge:
      value_type: int
  postgresql.vacuum.heap_blks_scanned:
    enabled: false
    description: Number of heap blocks scanned. Because the visibility map is used to
      optimize scans, some blocks will be skipped without inspection; skipped blocks
      are included in this total, so that this number will eventually become equal to
      heap_blks_total when the vacuum is complete. This counter only advances when the
      phase is scanning heap. This metric is tagged with db, table, phase.
    unit: '{block}'
    gauge:
      value_type: int
  postgresql.vacuum.heap_blks_total:
    enabled: false
    description: Total number of heap blocks in the table. This number is reported as
      of the beginning of the scan; blocks added later will not be (and need not be)
      visited by this VACUUM. This metric is tagged with db, table, phase.
    unit: '{block}'
    gauge:
      value_type: int
  postgresql.vacuum.heap_blks_vacuumed:
    enabled: false
    description: Number of heap blocks vacuumed. Unless the table has no indexes, this
      counter only advances when the phase is vacuuming heap. Blocks that contain no
      dead tuples are skipped, so the counter may sometimes skip forward in large increments.
      This metric is tagged with db, table, phase.
    unit: '{block}'
    gauge:
      value_type: int
  postgresql.vacuum.index_vacuum_count:
    enabled: false
    description: Number of completed index vacuum cycles. This metric is tagged with
      db, table, phase.
    unit: '{block}'
    gauge:
      value_type: int
  postgresql.vacuum.max_dead_tuples:
    enabled: false
    description: Number of dead tuples that we can store before needing to perform an
      index vacuum cycle, based on maintenance_work_mem. This metric is tagged with
      db, table, phase.
    unit: "1"
    gauge:
      value_type: int
  postgresql.vacuum.num_dead_tuples:
    enabled: false
    description: Number of dead tuples collected since the last index vacuum cycle.
      This metric is tagged with db, table, phase.
    unit: "1"
    gauge:
      value_type: int
  postgresql.waiting_queries:
    enabled: false
    description: Enabled with `collect_activity_metrics`. The number of waiting queries
      in this database. This metric (by default) is tagged with db, app, user.
    unit: "1"
    gauge:
      value_type: int
  postgresql.wal_age:
    enabled: false
    description: Enabled with `collect_wal_metrics`. The age in seconds of the oldest
      WAL file.
    unit: '{second}'
    gauge:
      value_type: int
  postgresql.wal_count:
    enabled: false
    description: The number WAL files on disk.
    unit: "1"
    gauge:
      value_type: int
  postgresql.wal_receiver.connected:
    enabled: false
    description: The status of the WAL receiver. This metric will be set to 1 with a
      'status:disconnected' tag if the instance doesn't have a running WAL receiver.
      Otherwise it will use status value from pg_stat_wal_receiver. This metric is tagged
      with status.
    unit: "1"
    gauge:
      value_type: int
  postgresql.wal_receiver.last_msg_receipt_age:
    enabled: false
    description: Time since the reception of the last message from the WAL sender. This
      metric is tagged with status.
    unit: '{second}'
    gauge:
      value_type: int
  postgresql.wal_receiver.last_msg_send_age:
    enabled: false
    description: The age of the latest message's send time received from the WAL sender.
      This metric is tagged with status.
    unit: '{second}'
    gauge:
      value_type: int
  postgresql.wal_receiver.latest_end_age:
    enabled: false
    description: Time since the reception of the last message from the WAL sender with
      an WAL location update. This metric is tagged with status.
    unit: '{second}'
    gauge:
      value_type: int
  postgresql.wal_receiver.received_timeline:
    enabled: false
    description: Timeline number of last write-ahead log location received and flushed
      to disk, the initial value of this field being the timeline number of the first
      log location used when WAL receiver is started. This metric is tagged with status.
    unit: "1"
    gauge:
      value_type: int
  postgresql.wal_size:
    enabled: false
    description: The sum of all WAL files on disk.
    unit: By
    gauge:
      value_type: int

    
